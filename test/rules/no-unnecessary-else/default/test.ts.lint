if (condition) {
    return;
} else {}
  ~~~~ [fail]

if (condition) return;
else ;
~~~~ [fail]

if (condition) {
    {
        return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    if (condition) {
        return;
    } else {
      ~~~~ [fail]
        return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    if (condition) {
        return;
    }
} else {}

if (condition) return;

if (condition) foo();
else bar();

if (condition) {
    return;
}

if (condition) {
    foo();
} else {
    bar();
}

if (condition) {
    {
    }
} else {}

if (condition) {
    if (condition) {
        return;
    } else {
      ~~~~ [fail]
    }
} else {}

if (condition) {
    if (condition) {
    }
} else {}

if (condition) {
    switch (foo) {
        case 'a':
            return;
        case 'b':
            return;
        default:
            return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    switch (foo) {
        default:
            return;
        case 'a':
            return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    switch (foo) {
        case 'a':
            return;
        case 'b':
            return;
    }
} else {}

for (;;) {
    if (condition) {
        continue;
    } else {}
      ~~~~ [fail]

    if (condition) {
        break;
    } else {}
      ~~~~ [fail]

    switch (foo) {
        case 1:
            if (foo) {
                continue;
            } else {}
              ~~~~ [fail]

            if (foo) {
                break;
            } else {}
              ~~~~ [fail]
    }

    if (condition) {
        switch (foo) {
            case 1:
                continue;
            default:
                console.log('foo');
                // fallthrough
            case 2:
                return;
        }
    } else {}
      ~~~~ [fail]

    if (condition) {
        switch (foo) {
            case 1:
                break;
            default:
            case 2:
                return;
        }
    } else {}
}

if (condition) {
    throw 'foo';
} else {}
  ~~~~ [fail]

if (condition)
    throw 'foo';
else;
~~~~ [fail]

if (condition) {
}else if (condition) {
    return;
} else {}

if (condition) {
}else{
    if (condition) {
        return;
    } else {}
      ~~~~ [fail]
}

if (condition) {
    try {
    } catch {
        return;
    }
} else {}

if (condition) {
    try {
        return;
    } catch {
    }
} else {}

if (condition) {
    try {
    } catch {
    } finally {
        return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    try {
        return;
    } catch {
    } finally {
    }
} else {}

if (condition) {
    try {
    } finally {
        return;
    }
} else {}
  ~~~~ [fail]

if (condition) {
    try {
        return;
    } finally {
    }
} else {}
  ~~~~ [fail]

if (condition) {
    for (;;) {
        try {
            return;
        } catch {
            return;
        } finally {
            break;
        }
    }
} else {}

if (condition) {
    for (;;) {
        try {
            return;
        } finally {
            break;
        }
    }
} else {}

if (condition) {
    for (;;) {
        try {
            break;
        } finally {
            return;
        }
    }
} else {}
  ~~~~ [fail]

if (condition) {
    for (;;) {
        try {
            break;
        } finally {
            continue;
        }
    }
} else {}

if (condition) {
    foo: for (;;) {
        if (condition) {
            continue;
        } else {
          ~~~~ [fail]
            break;
        }
    }
} else {}

if (condition) {
    foo: for (;;) {
        if (condition)
            while (true) {
                if (condition) {
                    continue foo;
                } else {
                  ~~~~ [fail]
                    break foo;
                }
            }
        else {}
        ~~~~ [fail]
    }
} else {}

if (condition) {
    foo: for (;;) {
        if (condition)
            while (condition) {
                if (condition)
                    continue;
                if (condition) {
                    continue foo;
                } else {
                  ~~~~ [fail]
                    break foo;
                }
            }
        else {}
    }
} else {}

foo: for (;;) {
    if (condition)
        switch (v) {
            case 1:
                if (condition) {
                    break;
                } else {}
                  ~~~~ [fail]
            default:
                continue foo;
        }
    else {}
}

foo: for (;;)
    if (condition)
        for (;;)
            try {
                break foo;
            } catch {
                continue foo;
            } finally {
                break;
            }
    else {}

if (condition) {
    try {
        throw 'foo';
    } catch {}
} else {}

if (condition) {
    try {
        'statement';
    } catch {
        throw 'foo';
    }
} else {}

if (condition) {
    try {
        return foo();
    } catch {
        throw 'foo';
    }
} else {}
  ~~~~ [fail]

if (condition) {
    try {
        return foo();
    } finally {
    }
} else {}
  ~~~~ [fail]

if (condition) {
    try {
    } finally {
        return;
    }
} else {}
  ~~~~ [fail]

foo: bar: for (;;) {
    if (condition)
        for (;;)
            continue foo;
    else {}
    ~~~~ [fail]

    if (condition)
        for (;;)
            break bar;
    else {}
    ~~~~ [fail]

    if (condition)
        baz: bas: for (;;)
            break bas;
    else {}

    if (condition)
        baz: bas: for (;;)
            break baz;
    else {}
}

[fail]: unnecessary else
